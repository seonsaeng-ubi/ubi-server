upstream django {
  server app:8000;
}

# HTTP: redirect everything to HTTPS
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  client_max_body_size 100M;

  location /.well-known/acme-challenge/ {
    root /var/www/certbot; # optional if you use certbot webroot
  }

  location / {
    return 301 https://$host$request_uri;
  }
}

# HTTPS: terminate TLS and proxy to Django
server {
  listen 443 ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  server_name _;

  client_max_body_size 100M;

  # SSL certs (mount via docker-compose: ./nginx/certs)
  ssl_certificate     /etc/nginx/certs/fullchain.pem;
  ssl_certificate_key /etc/nginx/certs/privkey.pem;

  # Recommended TLS settings
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 1d;

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

  location /static/ {
    alias /static/;
  }

  location /media/ {
    alias /media/;
  }

  location / {
    try_files $uri @proxy_to_app;
  }

  location @proxy_to_app {
    proxy_pass http://django;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}
